Step 1: Problem ko chhote parts me divide karo
Given:

Ek sorted array numbers[]

Ek target number

Hume do indices return karne hain (1-based indexing) jinke corresponding numbers ka sum target ke barabar ho.

Constant extra space use karna hai → yani hashmap nahi use kar sakte.

Ek hi solution hoga (Matlab hume guaranteed hai ki ek valid answer milega).

🔹 Example:

makefile
Copy
Edit
Input:  numbers = [2,7,11,15], target = 9  
Output: [1,2]  (kyunki 2 + 7 = 9)  
Step 2: Code likhne se pehle samjho aur visualize karo
Agar array sorted hai, to hum two-pointer technique use kar sakte hain.

🤔 Two-Pointer Technique ka Logic:

Ek pointer left (shuru se start) karega.

Dusra pointer right (end se start) karega.

Dono numbers ka sum calculate karenge:

Agar sum target se chhota hai → Left pointer aage badhao (kyunki array sorted hai).

Agar sum target se bada hai → Right pointer peeche lao.

Agar sum target ke barabar hai → Answer mil gaya!

Flowchart Socho:

sql
Copy
Edit
Start → Left = 0, Right = len(numbers)-1  
Check sum:
  ↳ Agar sum < target → left++  
  ↳ Agar sum > target → right--  
  ↳ Agar sum == target → return [left+1, right+1] (1-based indexing)  
Step 3: Apne words me samjhao (Feynman Technique)
🔹 "Mujhe kya karna hai?" → Ek sorted array diya hai, mujhe aise do numbers dhoondhne hain jinka sum target ke equal ho.

🔹 "Kaise karunga?" → HashMap use nahi kar sakte, isliye two-pointer approach best hai.

Left aur Right pointer se sum nikalunga.

Agar sum chhota hai to left pointer badhao, agar bada hai to right pointer ghatao.

Jab tak sum target na ho jaye, loop chalayenge.

Step 4: Code likho aur comments se breakdown karo
python
Copy
Edit
class Solution:
    def twoSum(self, numbers, target):
        left = 0                  # Left pointer (start of array)
        right = len(numbers) - 1   # Right pointer (end of array)

        while left < right:
            current_sum = numbers[left] + numbers[right]  # Calculate sum
            
            if current_sum == target:  # 🎯 Match mil gaya!
                return [left + 1, right + 1]  # 1-based index return karna hai
            
            elif current_sum < target:  
                left += 1  # Sum chhota hai → left pointer aage badhao
            
            else:
                right -= 1  # Sum bada hai → right pointer peeche lao
Step 5: Practice aur Dry Run karo
Example 1:

***********
numbers = [2,7,11,15], target = 9

Step-by-step:
left = 0, right = 3  →  numbers[0] + numbers[3] = 2 + 15 = 17 (zyada bada) → right--
left = 0, right = 2  →  numbers[0] + numbers[2] = 2 + 11 = 13 (zyada bada) → right--
left = 0, right = 1  →  numbers[0] + numbers[1] = 2 + 7 = 9 ✅ match!
Return [1, 2]
Example 2:

sql
Copy
Edit
numbers = [2,3,4], target = 6

left = 0, right = 2  →  2 + 4 = 6 ✅ match!
Return [1, 3]
Step 6: Mnemonics ya Memory Tricks use karo
✅ Sorted array? → Two-pointer sochna chahiye!
✅ Pointers: Left (small) → Right (large) → Adjust sum accordingly!
✅ "Agar sum kam hai to left aage badhao, agar sum zyada hai to right peeche lao!"

Time Complexity Analysis
✅ O(n) → Linear Time

Ek hi loop chal raha hai (har number ek baar process ho raha hai).

✅ O(1) → Constant Space

Extra space use nahi ho raha (sirf 2 pointers use kar rahe hain).

🔹 Final Summary:
1️⃣ Sorted array diya hai → Two-pointer approach use karo.
2️⃣ Left aur Right pointer se sum check karte jao.
3️⃣ Sum chhota ho to left badhao, bada ho to right ghatao.
4️⃣ Jab target mil jaye, return indices (1-based indexing).
5️⃣ Time Complexity: O(n), Space Complexity: O(1).

